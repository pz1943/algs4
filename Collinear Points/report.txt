Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
     -  segments() contains the same segment more than once
     -  segment 0: (29000, 17000) -> (1000, 17000)
     -  segment 3: (29000, 17000) -> (1000, 17000)

     -  student   solution has 4 non-null entries
     -  reference solution has 4 non-null entries
     -  1 extra entry in student solution: (29000, 17000) -> (1000, 17000)
     -  1 missing entry in student solution: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

  *  filename = input48.txt
     -  segments() contains the same segment more than once
     -  segment 1: (24000, 23000) -> (1000, 23000)
     -  segment 6: (24000, 23000) -> (1000, 23000)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (24000, 23000) -> (1000, 23000)

  *  filename = input299.txt
     -  segments() contains the same segment more than once
     -  segment 2: (28350, 15400) -> (1650, 2050)
     -  segment 6: (28350, 15400) -> (1650, 2050)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (28350, 15400) -> (1650, 2050)

==> FAILED

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
     -  segments() contains the same segment more than once
     -  segment 0: (18155, 2805) -> (4689, 2805)
     -  segment 5: (18155, 2805) -> (4689, 2805)

     -  student   solution has 6 non-null entries
     -  reference solution has 5 non-null entries
     -  1 extra entry in student solution: (18155, 2805) -> (4689, 2805)

     -  failed on trial 1 of 250
     20
     18155  2805
     11454 18754
     19960  6011
     18850  5184
      2000  7937
     13315  6011
      7890  5184
      3326 18754
      8950 18754
     12516  2805
     13383  6011
     17835  2805
     12518 18754
     14717  5184
     14740  7937
      4034  7937
      4689  2805
      3575  6011
      9095  7937
      7629  5184

  *  10 random horizontal line segments
     -  segments() contains the same segment more than once
     -  segment 1: (20340, 1446) -> (2294, 1446)
     -  segment 10: (20340, 1446) -> (2294, 1446)

     -  student   solution has 11 non-null entries
     -  reference solution has 10 non-null entries
     -  1 extra entry in student solution: (20340, 1446) -> (2294, 1446)

     -  failed on trial 1 of 50

  *  15 random horizontal line segments
     -  segments() contains the same segment more than once
     -  segment 2: (20401, 2906) -> (10711, 2906)
     -  segment 15: (20401, 2906) -> (10711, 2906)

     -  student   solution has 16 non-null entries
     -  reference solution has 15 non-null entries
     -  1 extra entry in student solution: (20401, 2906) -> (10711, 2906)

     -  failed on trial 1 of 5

==> FAILED

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
     -  segments() contains the same segment more than once
     -  segment 3: (5617, 18248) -> (5617, 2288)
     -  segment 5: (5617, 18248) -> (5617, 2288)

     -  student   solution has 6 non-null entries
     -  reference solution has 5 non-null entries
     -  1 extra entry in student solution: (5617, 18248) -> (5617, 2288)

     -  failed on trial 2 of 250
     20
      5617  2288
      4514 18392
     10482  7858
      5617 15317
     10482  6308
      4514 16358
      5617 18248
      1896  8964
     10482 14839
     20054 11648
      5617 16904
      1896 15654
      4514 17078
      4514 13829
      1896 13874
     10482  6673
     20054 18043
     20054  2031
      1896 13686
     20054 13104

  *  10 random vertical line segments
     -  segments() contains the same segment more than once
     -  segment 6: (8691, 19538) -> (8691, 4559)
     -  segment 10: (8691, 19538) -> (8691, 4559)

     -  student   solution has 11 non-null entries
     -  reference solution has 10 non-null entries
     -  1 extra entry in student solution: (8691, 19538) -> (8691, 4559)

     -  failed on trial 1 of 50

  *  15 random vertical line segments
     -  segments() contains the same segment more than once
     -  segment 0: (13703, 6993) -> (13703, 2481)
     -  segment 15: (13703, 6993) -> (13703, 2481)

     -  student   solution has 16 non-null entries
     -  reference solution has 15 non-null entries
     -  1 extra entry in student solution: (13703, 6993) -> (13703, 2481)

     -  failed on trial 1 of 5

==> FAILED

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
  *  filename = input10.txt
  *  filename = input20.txt
  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 2: (24000, 23000) -> (1000, 23000)
     -  segment 7: (24000, 23000) -> (1000, 23000)

     -  student   solution has 8 non-null entries
     -  reference solution has 7 non-null entries
     -  1 extra entry in student solution: (24000, 23000) -> (1000, 23000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 17: (30000, 23000) -> (0, 23000)
     -  segment 27: (30000, 23000) -> (0, 23000)

     -  student   solution has 28 non-null entries
     -  reference solution has 31 non-null entries
     -  1 extra entry in student solution: (30000, 23000) -> (0, 23000)
     -  4 missing entries in student solution, including: (29000, 14000) -> (29000, 18000) -> (29000, 24000) -> (29000, 31000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 2: (28350, 15400) -> (1650, 2050)
     -  segment 6: (28350, 15400) -> (1650, 2050)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (28350, 15400) -> (1650, 2050)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (30000, 0) -> (0, 0)
     -  segment 5: (30000, 0) -> (0, 0)

     -  student   solution has 6 non-null entries
     -  reference solution has 5 non-null entries
     -  1 extra entry in student solution: (30000, 0) -> (0, 0)

==> FAILED

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 2: (16666, 1529) -> (16454, 121)
     -  segment 276: (16666, 1529) -> (16454, 121)

     -  student   solution has 277 non-null entries
     -  reference solution has 288 non-null entries
     -  1 extra entry in student solution: (16666, 1529) -> (16454, 121)
     -  12 missing entries in student solution, including: (16384, 30255) -> (15979, 30308) -> (15574, 30361) -> (15169, 30414) -> (14764, 30467)

  *  filename = rs1423.txt
     -  segments() contains the same segment more than once
     -  segment 92: (1467, 11667) -> (954, 11163)
     -  segment 416: (1467, 11667) -> (954, 11163)

     -  student   solution has 417 non-null entries
     -  reference solution has 443 non-null entries
     -  1 extra entry in student solution: (1467, 11667) -> (954, 11163)
     -  27 missing entries in student solution, including: (14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)

==> FAILED

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
     -  segments() contains the same segment more than once
     -  segment 0: (29000, 17000) -> (1000, 17000)
     -  segment 3: (29000, 17000) -> (1000, 17000)

     -  student   solution has 4 non-null entries
     -  reference solution has 4 non-null entries
     -  1 extra entry in student solution: (29000, 17000) -> (1000, 17000)
     -  1 missing entry in student solution: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

  *  filename = input48.txt
     -  segments() contains the same segment more than once
     -  segment 1: (24000, 23000) -> (1000, 23000)
     -  segment 6: (24000, 23000) -> (1000, 23000)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (24000, 23000) -> (1000, 23000)

  *  filename = input299.txt
     -  segments() contains the same segment more than once
     -  segment 2: (28350, 15400) -> (1650, 2050)
     -  segment 6: (28350, 15400) -> (1650, 2050)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (28350, 15400) -> (1650, 2050)

==> FAILED

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
     -  segments() contains the same segment more than once
     -  segment 0: (29000, 17000) -> (1000, 17000)
     -  segment 3: (29000, 17000) -> (1000, 17000)

     -  student   solution has 4 non-null entries
     -  reference solution has 4 non-null entries
     -  1 extra entry in student solution: (29000, 17000) -> (1000, 17000)
     -  1 missing entry in student solution: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

  *  filename = input48.txt
     -  segments() contains the same segment more than once
     -  segment 1: (24000, 23000) -> (1000, 23000)
     -  segment 6: (24000, 23000) -> (1000, 23000)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (24000, 23000) -> (1000, 23000)

==> FAILED

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
     -  segments() contains the same segment more than once
     -  segment 2: (5833, 9709) -> (489, 4917)
     -  segment 5: (5833, 9709) -> (489, 4917)

     -  student   solution has 6 non-null entries
     -  reference solution has 5 non-null entries
     -  1 extra entry in student solution: (5833, 9709) -> (489, 4917)

     -  failed on trial 1 of 500
     20
      5165  9110
      5969  6368
     14562  6933
      2689   928
     10553 13408
      1825  6115
     18581 15144
     10378 12310
     13171  4918
      3673  2560
     12208  3523
     12957  4608
       489  4917
     16856 19535
      3104  6167
      5833  9709
      7445  8816
     14795 13836
     15137 17864
      9116 11874

  *  25 random line segments
     -  segments() contains the same segment more than once
     -  segment 2: (14082, 7926) -> (11846, 1829)
     -  segment 25: (14082, 7926) -> (11846, 1829)

     -  student   solution has 26 non-null entries
     -  reference solution has 25 non-null entries
     -  1 extra entry in student solution: (14082, 7926) -> (11846, 1829)

     -  failed on trial 2 of 100

  *  50 random line segments
     -  segments() contains the same segment more than once
     -  segment 43: (13106, 16993) -> (4647, 11372)
     -  segment 50: (13106, 16993) -> (4647, 11372)

     -  student   solution has 51 non-null entries
     -  reference solution has 50 non-null entries
     -  1 extra entry in student solution: (13106, 16993) -> (4647, 11372)

     -  failed on trial 1 of 15

  *  100 random line segments
     -  segments() contains the same segment more than once
     -  segment 32: (12293, 9785) -> (4877, 1601)
     -  segment 100: (12293, 9785) -> (4877, 1601)

     -  student   solution has 101 non-null entries
     -  reference solution has 100 non-null entries
     -  1 extra entry in student solution: (12293, 9785) -> (4877, 1601)

     -  failed on trial 1 of 2

==> FAILED

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
     -  segments() contains the same segment more than once
     -  segment 0: (12350, 8830) -> (11513, 8830)
     -  segment 5: (12350, 8830) -> (11513, 8830)

     -  student   solution has 6 non-null entries
     -  reference solution has 5 non-null entries
     -  1 extra entry in student solution: (12350, 8830) -> (11513, 8830)

     -  failed on trial 1 of 500
     20
     11846  8830
      5543  8621
      7814  9299
      5404 12316
      8442 13246
     12035  8830
      7685 12599
     11513  8830
      7511 12961
      5051 10448
      7142  8819
      4940 10436
      7282  8919
     12350  8830
      5943 12481
      5417  8387
      5162 10460
      4977 10440
      8486  9779
      3905  5579

  *  25 random line segments
     -  segments() contains the same segment more than once
     -  segment 13: (8712, 10528) -> (8712, 10242)
     -  segment 25: (8712, 10528) -> (8712, 10242)

     -  student   solution has 26 non-null entries
     -  reference solution has 25 non-null entries
     -  1 extra entry in student solution: (8712, 10528) -> (8712, 10242)

     -  failed on trial 1 of 100

  *  50 random line segments
     -  segments() contains the same segment more than once
     -  segment 46: (11718, 14060) -> (10556, 13230)
     -  segment 50: (11718, 14060) -> (10556, 13230)

     -  student   solution has 51 non-null entries
     -  reference solution has 50 non-null entries
     -  1 extra entry in student solution: (11718, 14060) -> (10556, 13230)

     -  failed on trial 1 of 15

  *  100 random line segments
     -  segments() contains the same segment more than once
     -  segment 66: (8146, 12099) -> (3726, 10227)
     -  segment 100: (8146, 12099) -> (3726, 10227)

     -  student   solution has 101 non-null entries
     -  reference solution has 100 non-null entries
     -  1 extra entry in student solution: (8146, 12099) -> (3726, 10227)

     -  failed on trial 1 of 2

==> FAILED

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  student   solution has 1 non-null entries
     -  reference solution has 2 non-null entries
     -  1 missing entry in student solution: (7, 0) -> (7, 3) -> (7, 4) -> (7, 9)

     -  failed on trial 138 of 500
     10
         7     9
         4     5
         7     4
         1     3
         3     3
         6     8
         2     4
         7     0
         7     3
         2     6

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 17: (2, 8) -> (6, 0)
     -  segment 32: (2, 8) -> (6, 0)

     -  student   solution has 33 non-null entries
     -  reference solution has 41 non-null entries
     -  1 extra entry in student solution: (2, 8) -> (6, 0)
     -  9 missing entries in student solution, including: (3, 6) -> (5, 7) -> (7, 8) -> (9, 9)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  student   solution has 76 non-null entries
     -  reference solution has 129 non-null entries
     -  53 missing entries in student solution, including: (0, 6) -> (2, 7) -> (4, 8) -> (6, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 147: (9, 49) -> (47, 11)
     -  segment 151: (9, 49) -> (47, 11)

     -  student   solution has 152 non-null entries
     -  reference solution has 210 non-null entries
     -  1 extra entry in student solution: (9, 49) -> (47, 11)
     -  59 missing entries in student solution, including: (45, 28) -> (39, 30) -> (24, 35) -> (12, 39)

     -  failed on trial 1 of 10

==> FAILED

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 0: (3, 0) -> (0, 0)
     -  segment 8: (3, 0) -> (0, 0)

     -  student   solution has 9 non-null entries
     -  reference solution has 10 non-null entries
     -  1 extra entry in student solution: (3, 0) -> (0, 0)
     -  2 missing entries in student solution, including: (0, 0) -> (1, 1) -> (2, 2) -> (3, 3)

  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 0: (4, 0) -> (0, 0)
     -  segment 11: (4, 0) -> (0, 0)

     -  student   solution has 12 non-null entries
     -  reference solution has 16 non-null entries
     -  1 extra entry in student solution: (4, 0) -> (0, 0)
     -  5 missing entries in student solution, including: (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4)

  *  10-by-10 grid
     -  student   solution has 84 non-null entries
     -  reference solution has 154 non-null entries
     -  70 missing entries in student solution, including: (0, 6) -> (3, 7) -> (6, 8) -> (9, 9)

  *  20-by-20 grid
     -  student   solution has 636 non-null entries
     -  reference solution has 2446 non-null entries
     -  1810 missing entries in student solution, including: (16, 16) -> (11, 17) -> (6, 18) -> (1, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 2: (4, 2) -> (0, 2)
     -  segment 12: (4, 2) -> (0, 2)

     -  student   solution has 13 non-null entries
     -  reference solution has 13 non-null entries
     -  1 extra entry in student solution: (4, 2) -> (0, 2)
     -  1 missing entry in student solution: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 4: (0, 3) -> (3, 0)
     -  segment 12: (0, 3) -> (3, 0)

     -  student   solution has 13 non-null entries
     -  reference solution has 16 non-null entries
     -  1 extra entry in student solution: (0, 3) -> (3, 0)
     -  4 missing entries in student solution, including: (5, 0) -> (5, 1) -> (5, 2) -> (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 18: (6, 3) -> (9, 0)
     -  segment 24: (6, 3) -> (9, 0)

     -  student   solution has 25 non-null entries
     -  reference solution has 38 non-null entries
     -  1 extra entry in student solution: (6, 3) -> (9, 0)
     -  14 missing entries in student solution, including: (9, 0) -> (9, 1) -> (9, 2) -> (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 17: (8, 3) -> (11, 0)
     -  segment 31: (8, 3) -> (11, 0)

     -  student   solution has 32 non-null entries
     -  reference solution has 79 non-null entries
     -  1 extra entry in student solution: (8, 3) -> (11, 0)
     -  48 missing entries in student solution, including: (14, 0) -> (14, 1) -> (14, 2) -> (14, 3)

  *  25-by-4 grid
     -  student   solution has 64 non-null entries
     -  reference solution has 213 non-null entries
     -  149 missing entries in student solution, including: (24, 0) -> (24, 1) -> (24, 2) -> (24, 3)

==> FAILED

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==> passed

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 2
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 7
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = vertical5.txt
     -  segments() and numberOfSeg

...

Warning: the grading output was truncated due to excessive length.
Typically, this is becasue you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception).